#!/usr/bin/env node
'use strict';
// MEAN CLI.
var program = require('commander');
var Cli = require('../cli');
var BigNumber = require('bignumber.js');

// set program version
var version = require('../package').version;
program.version(version, '-v, --version');

program
  .description('RPC Check - Checks for Ethereum JSON RPC Nodes')
  .usage('[options] <uri>')
  .option('--json', 'only JSON output')
  .parse(process.argv);

// print help with no args
if (program.args.length < 1) {
  program.help();
}

var cli = new Cli(program);

function runCheck(cli) {
  var network = cli.web3.version.network;

  var version = {
    api: cli.web3.version.api,
    node: cli.web3.version.node
  }

  var mining = cli.web3.eth.mining;
  var accounts = cli.web3.eth.accounts;
  var gasPrice = new BigNumber(cli.web3.eth.gasPrice).toNumber();
  var lastBlock = cli.web3.eth.blockNumber;

  var peerCount = cli.web3.net.peerCount;
  var listening = cli.web3.net.listening;
  var host = program.args[0];


  var results = {
    host,
    version,
    network,
    accounts: accounts,
    gasPrice,
    lastBlock,
    net: {
      peerCount,
      listening
    },
    eth: {
      defaultAccount:   cli.web3.eth.defaultAccount,
      mining
    }
  };

  var keys = Object.keys(results);
  if (!program.json) {
    keys.map(function(key) {
      console.log(key, results[key]);
    });
  } else {
    console.log(JSON.stringify(results))
  }
}
try {
  cli.run(runCheck);
} catch(e) {
  console.error(e.message);
  process.exit(1)
}
process.exit(0)
